<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>com.indeed</groupId>
        <artifactId>proctor-parent</artifactId>
        <!--This version is not used in latest release. See https://mvnrepository.com/artifact/com.indeed/proctor-parent -->
        <version>9999-SNAPSHOT</version>
    </parent>

    <artifactId>proctor-common</artifactId>

    <scm> <!-- prevent Maven from trying to override with subproject suffix -->
        <url>${project.parent.scm.url}</url>
        <connection>${project.parent.scm.connection}</connection>
        <developerConnection>${project.parent.scm.developerConnection}</developerConnection>
    </scm>

    <properties>
        <tomcat-api7.version>7.0.8</tomcat-api7.version>
    </properties>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>test-jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <!--
                    Tomcat7 el library has better performance than Tomcat8 one.
                    To avoid the performance issue on Tomcat8, proctor-common and related libraries should be
                    independent of the version of the apache-el of the running environment.
                    This shaded el library doesn't allow to use Tomcat8 el syntax like assign, concat, arrows, maps.

                    The current approach shades the classes in all proctor packages during packaging,
                    which sadly causes jvm crashes when running mvn test twice without clean.
                    Shading one module only in a maven multi-module project does not work cleanly.
                    The clean way to use the shade plugin would be to package javax-el7 in a separate maven project,
                    and use it as a library.
                    Since maven has no incremental testing anyway, running mvn clean test is ok as workaround.
                -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <artifactSet>
                                <includes>
                                    <include>org.apache.tomcat:*</include>
                                </includes>
                            </artifactSet>
                            <filters>
                                <filter>
                                    <artifact>org.apache.tomcat</artifact>
                                    <includes>
                                        <include>org/apache/el/**</include>
                                        <include>javax/el/**</include>
                                    </includes>
                                </filter>
                            </filters>
                            <relocations>
                                <relocation>
                                    <pattern>javax.el.</pattern>
                                    <shadedPattern>com.indeed.shaded.javax.el7.</shadedPattern>
                                </relocation>
                                <relocation>
                                    <pattern>org.apache.el.</pattern>
                                    <shadedPattern>com.indeed.shaded.org.apache.el7.</shadedPattern>
                                </relocation>
                            </relocations>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <dependencies>
        <dependency>
            <groupId>com.indeed</groupId>
            <artifactId>util-core</artifactId>
            <version>${indeed-util.version}</version>
        </dependency>
        <dependency>
            <groupId>com.indeed</groupId>
            <artifactId>util-varexport</artifactId>
            <version>${indeed-util.version}</version>
        </dependency>

        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
        </dependency>
        <dependency>
            <groupId>com.google.code.findbugs</groupId>
            <artifactId>jsr305</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.tomcat</groupId>
            <artifactId>tomcat-el-api</artifactId>
            <version>${tomcat-api7.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.tomcat</groupId>
            <artifactId>tomcat-jasper-el</artifactId>
            <version>${tomcat-api7.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.tomcat</groupId>
            <artifactId>tomcat-jsp-api</artifactId>
            <version>${tomcat-api7.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.tomcat</groupId>
            <artifactId>tomcat-servlet-api</artifactId>
            <version>${tomcat-api7.version}</version>
        </dependency>
    </dependencies>
</project>

